<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:sharding="http://shardingsphere.io/schema/shardingsphere/sharding"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://shardingsphere.io/schema/shardingsphere/sharding
       http://shardingsphere.io/schema/shardingsphere/sharding/sharding.xsd">

    <bean id="studentDs" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="org.mariadb.jdbc.Driver"/>
        <property name="jdbcUrl" value="${student.jdbc.url}" />
        <property name="username" value="${student.jdbc.user}" />
        <property name="password" value="${student.jdbc.password}" />
        <property name="maximumPoolSize" value="50"/>
    </bean>

    <bean id="user0" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="org.mariadb.jdbc.Driver"/>
        <property name="jdbcUrl" value="${user0.jdbc.url}" />
        <property name="username" value="${user0.jdbc.user}" />
        <property name="password" value="${user0.jdbc.password}" />
        <property name="maximumPoolSize" value="50"/>
        <property name="connectionTimeout" value="30000"/>
    </bean>

    <bean id="user1" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="org.mariadb.jdbc.Driver"/>
        <property name="jdbcUrl" value="${user1.jdbc.url}" />
        <property name="username" value="${user1.jdbc.user}" />
        <property name="password" value="${user1.jdbc.password}" />
        <property name="maximumPoolSize" value="50"/>
        <property name="connectionTimeout" value="30000"/>
    </bean>

    <bean id="user2" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
        <property name="driverClassName" value="org.mariadb.jdbc.Driver"/>
        <property name="jdbcUrl" value="${user2.jdbc.url}" />
        <property name="username" value="${user2.jdbc.user}" />
        <property name="password" value="${user2.jdbc.password}" />
        <property name="maximumPoolSize" value="50"/>
        <property name="connectionTimeout" value="30000"/>
    </bean>
    <bean class="com.example.shardingjdbc.algorithm.MyPreciseShardingAlgorithm" id="myPreciseShardingAlgorithm"></bean>

    <!--行表达式分片策略，使用$->{}表达式-->
    <!--<sharding:inline-strategy id="studentTableStrategy" sharding-column="gid" algorithm-expression="t_student$->{gid % 3}"/>-->

    <!--标准分片策略-->
    <sharding:standard-strategy id="studentTableStrategy" sharding-column="gid" precise-algorithm-ref="myPreciseShardingAlgorithm"/>
    <!--分表不分库-->
    <sharding:data-source id="studentDataSource">
        <sharding:sharding-rule data-source-names="studentDs">
            <sharding:table-rules>
                <sharding:table-rule logic-table="t_student" actual-data-nodes="studentDs.t_student0,studentDs.t_student1,studentDs.t_student2"
                                     table-strategy-ref="studentTableStrategy" generate-key-column-name="gid"/>
            </sharding:table-rules>
        </sharding:sharding-rule>
    </sharding:data-source>


    <!--分库又分表-->
    <sharding:inline-strategy id="databaseStrategy" sharding-column="class_no" algorithm-expression="user$->{class_no % 3}" /><!--分库策略-->
    <sharding:inline-strategy id="userTableStrategy" sharding-column="gid" algorithm-expression="t_user$->{gid % 3}" /><!--分表策略-->
    <sharding:data-source id="shardingDataSource">
        <sharding:sharding-rule data-source-names="user0,user1,user2">
            <sharding:table-rules>
                <sharding:table-rule logic-table="t_user" actual-data-nodes="user$->{0..2}.t_user$->{0..2}" database-strategy-ref="databaseStrategy"
                                     table-strategy-ref="userTableStrategy" />
                <!--<sharding:table-rule logic-table="t_order_item" actual-data-nodes="ds$->{0..1}.t_order_item$->{0..1}" database-strategy-ref="databaseStrategy"-->
                                     <!--table-strategy-ref="orderItemTableStrategy" />-->
            </sharding:table-rules>
        </sharding:sharding-rule>
    </sharding:data-source>




    <!-- transaction manager -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="studentDataSource"/>
    </bean>

    <!-- mybatis factory -->
    <bean id="studentSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="studentDataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="mapperLocations" value="classpath*:mapper/**/*.xml"/>
    </bean>


    <!-- mybatis factory -->
    <bean id="userSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="shardingDataSource"/>
        <property name="configLocation" value="classpath:mybatis.xml"/>
        <property name="mapperLocations" value="classpath*:mapper/**/*.xml"/>
    </bean>

    <!-- scan mappers under the dao dir -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="studentSqlSessionFactory"/>
        <property name="basePackage" value="com.example.shardingjdbc.mapper"/>
    </bean>
</beans>